# -*- coding: utf-8 -*-
"""retrieve module

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yib63XUJ-4AjK6FXY3YprFYc4pvr7jBj
"""

#python module that requests the data (yahoo finance)

#!pip install yfinance

import yfinance as yf
import pandas as pd

class request_module:
    def __init__(self):
        pass

    def handle_errors_gracefully(self, e, ticker): #Handle errors that occur during data retrieval
        print(f"Error while downloading data for {ticker}: {e}")
        return None


    def write_stock_data_to_csv(self, stock_names, start_date, end_date, output_file):#Downloads + saves historical stock data from Yahoo Finance toCSV file
        data = {}
        for stock_name in stock_names:
            try:
                stock_data = yf.download(stock_name, start=start_date, end=end_date)
                if not stock_data.empty:
                    data[stock_name] = stock_data['Close']
            except (yf.TickerNotFound, yf.DownloadError) as e:
                data[stock_name] = self.handle_errors_gracefully(e, stock_name)

        if data:
            df = pd.DataFrame(data)
            df.to_csv(output_file, index_label='Date')
            print(f"Stock data saved to {output_file}")
        else:
            print("No data available for any of the provided stock names.")


class CSV_handler:
    @staticmethod
    def read_stock_data_from_csv(csv_file, stock_names, start_date, end_date):
        try:
            df = pd.read_csv(csv_file, index_col='Date', parse_dates=True)
            df = df.loc[start_date:end_date, stock_names] if stock_names else df.loc[start_date:end_date]#if stock_names is empty the entire DataFrame within the specified date range is returned
            return df
        except FileNotFoundError:
            print(f"Error: File {csv_file} not found.")
            return None

    @staticmethod
    def write_data_to_csv(data, output_file):
        try:
            df = pd.DataFrame(data)
            df.to_csv(output_file, index_label='Date')
            print(f"Data saved to {output_file}")
        except Exception as e:
            print(f"Error occurred while writing data to {output_file}: {e}")

# Example usage of the module request_module

if __name__ == "__main__":

    request = request_module()

    # Some CAC40 selected stocks:
    cac_tickers = [
    "AC.PA", "AI.PA", "AIR.PA", "ALO.PA", "ATO.PA", "CS.PA", "BNP.PA",
    "EN.PA", "CAP.PA", "CA.PA", "ACA.PA", "BN.PA", "DSY.PA", "ENGI.PA", "EL.PA",
    "RMS.PA", "KER.PA", "OR.PA", "LR.PA", "MC.PA", "ML.PA", "ORA.PA", "RI.PA",
    "PUB.PA", "RNO.PA", "SAF.PA", "SGO.PA", "SAN.PA", "SU.PA", "GLE.PA",
    "TEP.PA", "HO.PA", "TTE.PA", "VIE.PA", "VIV.PA"]

    start_date = '2010-01-01'
    end_date = '2020-01-01'
    output_csv_file = "cac40_stock_data.csv"

    request.write_stock_data_to_csv(cac_tickers, start_date, end_date, output_csv_file)

# Example usage of the module CSV_handler

if __name__ == "__main__":
  csv_file = "cac40_stock_data.csv"
  stock_names = cac_tickers
  start_date = '2010-01-01'
  end_date = '2020-01-01'

  retrieved_data = CSV_handler.read_stock_data_from_csv(csv_file, stock_names, start_date, end_date)

  print(retrieved_data)

#Check for any missing values
missing_values = retrieved_data.isna().sum()
print(missing_values)

csv_handler = CSV_handler()

# Read stock data from CSV
df1 = csv_handler.read_stock_data_from_csv("/content/cac40_stock_data.csv",[
    "AC.PA", "AI.PA", "AIR.PA", "ALO.PA", "ATO.PA", "CS.PA", "BNP.PA",
    "EN.PA", "CAP.PA", "CA.PA", "ACA.PA", "BN.PA", "DSY.PA", "ENGI.PA", "EL.PA",
    "RMS.PA", "KER.PA", "OR.PA", "LR.PA", "MC.PA", "ML.PA", "ORA.PA", "RI.PA",
    "PUB.PA", "RNO.PA", "SAF.PA", "SGO.PA", "SAN.PA", "SU.PA", "GLE.PA",
    "TEP.PA", "HO.PA", "TTE.PA", "VIE.PA", "VIV.PA"],'2010-01-01','2014-12-31')

#pas de trous avec cette liste
